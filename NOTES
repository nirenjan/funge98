Extensions
==========
struct funge_extn_s {
    struct funge_extn_s *next;
    int32_t extn_id;
    int32_t thread_id;
    int32_t enabled_mask;

    funge_function_t function[26];      

    int32_t pad[2];
};

Each thread has a pointer to the extension structure. When thread is created,
the pointer is NULL, indicating that no extensions are in place.

When a new extension is loaded, a new funge_extn_t structure is created and
is linked to the existing thread's extension chain. It then copies the function
table from the old extension structure and updates it with only those functions
that are applicable to the loaded extension.

Say three fingerprints are implemented on your interpreter,

* `E.G.` which implements `D` as 'Destroy' and `R` as 'Restore'
* `TEST` which implements `S` as 'Send', `R` as 'Receive', and `E` as 'Encrypt'
* `WORK` which implements `S` as 'Slice', `D` as 'Dice', `P` as 'Puree'

With these, the Funge programmer ought to be able to make code like:

`".G.E"4( ... "TSET"4( ... "KROW"4( ... S ... ) ... ) ... )`

So the extension chain would be like this:
WORK -> TEST -> E.G.

Loading E.G. would create a new table with all function pointers pointing to 'r'
but 'D' & 'R' would be updated accordingly.
Loading TEST would copy the table from E.G., but override R with receive and add
S & E functions.
Loading WORK would copy the table from work, override S & D and add P.

Unloading WORK would delete the structure, reverting the table to TEST

When a function from 'A' to 'Z' is encountered by the current thread, it will
call the extension handler, which in turn will call the correct extension
function by examining the current thread's funge_extn_t pointer.

When an extension is unloaded, the current funge_extn_t structure is freed and
the thread's extension pointer is changed to point to the next funge_extn_t.

Stack
=====

/****************************************************************************
 * A Funge98 stack is defined like below:
 *
 *         stack hdr      stack cell     stack cell
 *         +-+-+-+-+    +-+-+-+----    +-+-+-+----
 * TOSS -> | | | | | -> | | | | ... -> | | | | ... -> ...
 *         +-+-+-+-+    +-+-+-+----    +-+-+-+----
 *          |
 *          V
 *         +-------+
 * SOSS    | | | | | Next stack
 *         +-------+
 *          |
 *          V
 *          .
 *          .
 *          .
 *         
 ***************************************************************************/


struct funge_stack_cell_s {
    /* Pointer to the next stack cell in the same stack */
    struct funge_stack_cell_s *next_stack_cell;

    /* These are the actual values in the stack */
    int32_t cell[STACK_SZ];
};

struct funge_stack_s {
    /* Pointer to the next stack cell in the same stack */
    struct funge_stack_cell_s *next_stack_cell;

    /* Pointer to the next stack in the stack stack */
    struct funge_stack_s *next_stack;

    /*
     * Index of the top entry in the current stack.
     * This is NOT the index in the current stack cell.
     * However, it's easy to compute the index by taking
     * the bottom N bits (N = log2 STACK_SZ - 1) of this
     * value. The remaining bits will tell you how many
     * stack cells are used in the current stack.
     * A negative value indicates that the stack is empty.
     */
    int32_t top;

    /* This is the index of the stack in the stack stack, starting from 0 */
    int32_t stack_no;
};

At stack init:
next_stack_cell <- NULL
next_stack      <- NULL
top             <- (-1)
stack_no        <- 0

Push:
1. if (top == 0x7FFFFFFF) return STACK FULL;
2. Increment top
3. index <- top & 1023
4. if (index == 0), add new stack cell
5. Store entry in index

Pop
1. If (top < 0) return STACK_EMPTY
2. index <- top & 1023
3. if (index == 1023), free top stack cell
4. Return entry at index
5. Decrement top

Add new stack cell (*stack)
1. Allocate temp stack cell
2. Link to old stack cell
3. Change old stack cell pointer to point to temp node


